
My algorithm will take O(n) time becuase it will loop through entire array to shift indexes.

void Insert(int* arr, const int value, int index) {
    if(index >= SIZE || index < 0) return; theta(1)
    int temp = 0; theta(1)
    
    for(int i = 0; i < SIZE; i++) { theta(n)
        if(i == index) { theta(1)
            temp = arr[index]; theta(1)
            arr[index] = value; theta(1)
        } else if(i > index) { theta(1)
            int next = arr[i]; theta(1)
            arr[i] = temp; theta(1)
            temp = next; theta(1)
        }
    }
}

function InsertIntoArray() {
	if insertIndex greater than or equal to SIZE || index less than zero ; return out of function
	temperatoryValue equals zero

	for(loop through entire arr) {
		if(index equals insertionIndex) {
			temperatoryValue equals array at index
			arr at index equals desired value
		} else if index greater than insertion index {
			nextArrayValue equals arr at index
			array at index equals temperatoryValue
			temperatoryValue equals nextArrayValue
		} 
	}
}


// // Example program
// #include <iostream>
// #include <string>
// #include <cstdlib>
// #include <ctime>

// const int SIZE = 10;

// void Insert(int* arr, const int value, int index) {
//     if(index >= SIZE || index < 0) return;
//     int temp = 0;
    
//     for(int i = 0; i < SIZE; i++) {
//         if(i == index) {
//             temp = arr[index];
//             arr[index] = value;
//         } else if(i > index) {
//             int next = arr[i];
//             arr[i] = temp;
//             temp = next; 
//         }
//     }

// }

// int main() {

//     int* arr = new int[SIZE];
    
//     for(int i = 0; i < SIZE - 5; i++) {
//         *(arr + i) = rand() % 10 + 1;  
//     }
    
//      std::cout << "Before insert" << std::endl << std::endl;
    
//     for(int i = 0; i < SIZE; i++)  {
//         std::cout << *(arr + i) << std::endl;   
//     }
    
//     Insert(arr, 100, 0);
//     Insert(arr, 90, 2);
//     Insert(arr, 88, 7);
//     Insert(arr, 81, SIZE - 1);
    

    
//     std::cout << "After insert" << std::endl << std::endl;
        
//     for(int i = 0; i < SIZE; i++)  {
//         std::cout << *(arr + i) << std::endl;   
//     }
    
//     delete[] arr;
//     return 0;

// }